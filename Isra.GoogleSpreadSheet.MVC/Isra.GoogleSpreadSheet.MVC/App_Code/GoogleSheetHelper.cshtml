@helper GoogleSheetExportComponent(System.Web.Mvc.WebViewPage page)
    {
        <!-- Aqui se integran los scripts para exportar a google sheet -->

        <!-- evento cuando ya cargaron las librerias principales -->
        <script type="text/javascript">
            var CLIENT_ID = "@page.ViewBag.GoogleToken";

            var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/sheets/v4/rest"];

            // permisos de lectura y escritura de hojas de calculo
            var SCOPES = "https://www.googleapis.com/auth/spreadsheets";

            // Iniciar el cliente de auhtorize
            function handleClientLoad() {
                gapi.load('client:auth2', initClient);
            }

            function initClient() {
                gapi.client.init({
                    discoveryDocs: DISCOVERY_DOCS,
                    clientId: CLIENT_ID,
                    scope: SCOPES
                }).then(function () {
                    // cuando cargue el cliente de google sheet, invocar el login en automatico
                    if (!gapi.auth2.getAuthInstance().isSignedIn.get()) {
                        gapi.auth2.getAuthInstance().signIn();
                        loadSheetsApi();
                    }
                });
            }

            function loadSheetsApi() {
                var discoveryUrl = 'https://sheets.googleapis.com/$discovery/rest?version=v4';
                gapi.client.load(discoveryUrl);
            }

            // creando la hoja de calculo
            function CreateSpreadsheet(spreadsheetTitle, sheetTitle, finalColumnLetter, sheetData) {
                if (gapi.auth2.getAuthInstance().isSignedIn.get()) {
                    var spreadsheetBody = {
                        properties: {
                            title: spreadsheetTitle
                        },
                        sheets: [{
                            properties: {
                                title: sheetTitle
                            }
                        }]
                    };

                    var request = gapi.client.sheets.spreadsheets.create({}, spreadsheetBody);
                    request.then(function (response) {
                        // rellenando la hoja con datos
                        PutDataIntoSheet(response.result, finalColumnLetter, sheetData);
                    }, function (reason) {
                        // error
                        swal("Error!", "Hubo un error: " + reason.result.error.message, "error");
                    });
                }
            }

            // colocando los datos dentro de la hoja recien creada
            function PutDataIntoSheet(spreadsheet, finalColumnLetter, sheetData) {
                var params = {
                    spreadsheetId: spreadsheet.spreadsheetId
                };

                var batchUpdateValuesRequestBody = {
                    valueInputOption: 'RAW',

                    data: [{
                        range: "A1:" + finalColumnLetter + sheetData.length, // w11 , z1300
                        majorDimension: "ROWS",
                        values: sheetData
                    }]
                };

                var request = gapi.client.sheets.spreadsheets.values.batchUpdate(params, batchUpdateValuesRequestBody);
                request.then(function (response) {
                    var html = "<P>";

                    // resultados de filas creadas
                    html += "<p>Total de filas: " + response.result.totalUpdatedRows + "<p><br />";
                    html += "<p>Total de columnas: " + response.result.totalUpdatedColumns + "<p>";

                    // incrustar en forma de link el spreadsheet generado
                    html += "<br /><br />Consulta la hoja de información <a href='" + spreadsheet.spreadsheetUrl + "' target='_blank'>AQUI</a>"

                    html += "</p>";

                    swal({
                        title: "Correcto!",
                        html: true,
                        icon: "success",
                        text:html
                    });

                }, function (reason) {
                    swal("Error!", "Hubo un error: " + reason.result.error.message, "error");
                });
            }
        </script>
        <!-- biblioteca inicial -->
        <script async defer src="https://apis.google.com/js/api.js"
                onload="this.onload=function(){};handleClientLoad()"
                onreadystatechange="if (this.readyState === 'complete') this.onload()">
        </script>
}